# Mesa 3-D graphics library
# Version:  5.1
# 
# Copyright (C) 1999-2003  Brian Paul   All Rights Reserved.
# 
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
# BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
# AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# MinGW core makefile v1.3 for Mesa
#
#  Copyright (C) 2002 - Borca Daniel
#  Email : dborca@users.sourceforge.net
#  Web   : http://www.geocities.com/dborca


#
#  Available options:
#
#    Environment variables:
#	CFLAGS
#
#	GLIDE		path to Glide3 SDK; used with FX.
#			default = $(TOP)/3dfx/glide3
#	FX=1		build for 3dfx Glide3. Note that this disables
#			compilation of most WMesa code and requires fxMesa.
#			As a consequence, you'll need the Win32 Glide3
#			library to build any application.
#			default = no
#	ICD=1		build the installable client driver interface
#			(windows opengl driver interface)
#			default = no
#	X86=1		optimize for x86 (if possible, use MMX, SSE, 3DNow).
#			default = no
#
#    Targets:
#	all:		build GL
#	clean:		remove object files
#



.PHONY: all clean
.INTERMEDIATE: x86/gen_matypes.exe
.SUFFIXES: .rc .res

TOP = ../..
GLIDE ?= $(TOP)/3dfx/glide3
LIBDIR = $(TOP)/lib
ifeq ($(ICD),1)
  GL_DLL = mesa32.dll
  GL_IMP = libmesa32.a
else
  GL_DLL = opengl32.dll
  GL_IMP = libopengl32.a
endif

LDLIBS = -lgdi32

HOST_CC = gcc
CC = gcc
CFLAGS += -DBUILD_GL32 -D_OPENGL32_
CFLAGS += $(INCLUDE_DIRS)
ifeq ($(FX),1)
  CFLAGS += -I$(GLIDE)/include -DFX
  LDLIBS += -L$(GLIDE)/lib -lglide3x
  GL_DEF = drivers/glide/fxopengl.def
  GL_RES = drivers/glide/fx.rc
else
  ifeq ($(ICD),1)
    CFLAGS += -DUSE_MGL_NAMESPACE
    GL_DEF = drivers/windows/icd/mesa.def
  else    
    GL_DEF = drivers/windows/gdi/mesa.def
  endif
endif

LD = $(CC)
LDFLAGS = -shared -Wl,--no-undefined -Wl,--enable-auto-image-base -Wl,--kill-at -Wl,-enable-stdcall-fixup
AR = ar
ARFLAGS = rus

RC = windres
RCFLAGS = --output-format=coff

DLLWRAP = dllwrap
DLLTOOL = dlltool

UNLINK = rm -f $(1)

include sources

ifeq ($(X86),1)
CFLAGS += -DUSE_X86_ASM
CFLAGS += -DUSE_MMX_ASM
CFLAGS += -DUSE_SSE_ASM
CFLAGS += -DUSE_3DNOW_ASM
X86_SOURCES += $(X86_API)
else
X86_SOURCES =
endif

ifeq ($(FX),1)
DRIVER_SOURCES = \
	$(GLIDE_DRIVER_SOURCES) \
	drivers/glide/fxwgl.c
else
ifeq ($(ICD),1)
DRIVER_SOURCES = \
	drivers/windows/gdi/wmesa.c \
	drivers/windows/icd/icd.c
else
DRIVER_SOURCES = \
	drivers/windows/gdi/wmesa.c \
	drivers/windows/gdi/wgl.c
endif
endif

SOURCES = $(CORE_SOURCES) $(X86_SOURCES) $(COMMON_DRIVER_SOURCES) $(DRIVER_SOURCES)

OBJECTS = $(addsuffix .o,$(basename $(SOURCES)))

X86_OBJECTS = $(addsuffix .o,$(basename $(X86_SOURCES)))

RESOURCE = $(GL_RES:.rc=.res)

.c.o:
	$(CC) -o $@ $(CFLAGS) -c $<
.S.o:
	$(CC) -o $@ $(CFLAGS) -c $<
.s.o:
	$(CC) -o $@ $(CFLAGS) -x assembler-with-cpp -c $<
.rc.res:
	$(RC) -o $@ $(RCFLAGS) $<

all: $(LIBDIR)/$(GL_DLL) $(LIBDIR)/$(GL_IMP)

#$(LIBDIR)/$(GL_DLL) $(LIBDIR)/$(GL_IMP): $(OBJECTS) $(RESOURCE)
#	$(DLLWRAP) -o $(LIBDIR)/$(GL_DLL) --output-lib $(LIBDIR)/$(GL_IMP) --target i386-mingw32 --def $(GL_DEF) $^ $(LDLIBS)
$(LIBDIR)/$(GL_IMP): $(LIBDIR)/$(GL_DLL)
# FIXME: the dlltool thing below is most probably broken, but don't care about it for now
$(LIBDIR)/$(GL_DLL): $(OBJECTS) $(RESOURCE)
	$(LD) $(LDFLAGS) -o $@ $(OBJECTS) $(RESOURCE) $(GL_DEF) $(LDLIBS)
	$(DLLTOOL) --dllname $(GL_DLL) --input-def $(GL_DEF) --output-lib $(LIBDIR)/$(GL_IMP) -k

$(X86_OBJECTS): x86/matypes.h

x86/matypes.h: x86/gen_matypes.exe
	$< > $@

x86/gen_matypes.exe: x86/gen_matypes.c
	$(HOST_CC) -o $@ $(CFLAGS) -s $<

# [dBorca]
# glapi_x86.S needs some adjustments
# in order to generate correct entrypoints
# Trick: change the following condition to
# be always false if you need C entrypoints
# with USE_X86_ASM (useful for trace/debug)
ifeq (1,1)
x86/glapi_x86.o: x86/glapi_x86.S
	$(CC) -o $@ $(CFLAGS) -U__WIN32__ -DSTDCALL_API -c $<
else
main/dispatch.o: main/dispatch.c
	$(CC) -o $@ $(CFLAGS) -UUSE_X86_ASM -c $<
glapi/glapi.o: glapi/glapi.c
	$(CC) -o $@ $(CFLAGS) -UUSE_X86_ASM -c $<
endif

# [dBorca]
# if we want codegen, we have to stdcall
tnl/t_vtx_x86_gcc.o: tnl/t_vtx_x86_gcc.S
	$(CC) -o $@ $(CFLAGS) -DSTDCALL_API -c $<

clean:
	-$(call UNLINK,array_cache/*.o)
	-$(call UNLINK,glapi/*.o)
	-$(call UNLINK,main/*.o)
	-$(call UNLINK,math/*.o)
	-$(call UNLINK,shader/*.o)
	-$(call UNLINK,sparc/*.o)
	-$(call UNLINK,swrast/*.o)
	-$(call UNLINK,swrast_setup/*.o)
	-$(call UNLINK,tnl/*.o)
	-$(call UNLINK,x86/*.o)
	-$(call UNLINK,drivers/common/*.o)
	-$(call UNLINK,drivers/windows/gdi/*.o)
	-$(call UNLINK,drivers/windows/icd/*.o)
	-$(call UNLINK,drivers/glide/*.o)
	-$(call UNLINK,drivers/glide/*.res)

